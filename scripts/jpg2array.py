#!/usr/bin/env python3
import cv2
import numpy as np
import sys

def main():
    # Ensure proper command-line arguments are passed: input image and output C++ filename.
    if len(sys.argv) < 3:
        print("Usage: python script.py <input_image.jpg> <output_file.cpp> [--rgb]")
        sys.exit(1)
    
    input_filename = sys.argv[1]
    output_filename = sys.argv[2]
    
    # Check if RGB mode is requested
    rgb_mode = True
    if len(sys.argv) > 3 and sys.argv[3] == "--rgb":
        rgb_mode = True
    
    # Load the image in appropriate mode
    if rgb_mode:
        # Load in color (BGR format in OpenCV)
        image = cv2.imread(input_filename, cv2.IMREAD_COLOR)
        # Convert BGR to RGB
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    else:
        # Load in grayscale mode as before
        image = cv2.imread(input_filename, cv2.IMREAD_GRAYSCALE)
    
    if image is None:
        print(f"Error: Could not load the image file '{input_filename}'. Check the file path.")
        sys.exit(1)
        
    # Rescale to 
    side = 32
    image = cv2.resize(image, (side, side), interpolation=cv2.INTER_LINEAR)
    
    # Get image dimensions
    if rgb_mode:
        height, width, channels = image.shape
    else:
        height, width = image.shape
        channels = 1

    # Build the array content
    all = ""
    if rgb_mode:
        # Process RGB image - store R, G, B sequentially
        for row in image:
            line = ""
            for pixel in row:
                r, g, b = pixel  # Extract R, G, B values
                line += f"0x{r:02x}, 0x{g:02x}, 0x{b:02x}, "
            all += line + "\n"
    else:
        # Process grayscale image (same as before)
        for row in image:
            line = ""
            for pixel in row:
                line += f"0x{pixel:02x}, "
            all += line + "\n"
    
    # Debug output
    print(all)
    
    # Begin constructing the C++ file content.
    if rgb_mode:
        cpp_content = (
            "// This file is automatically generated from a JPG image (RGB mode).\n"
            "#include <stdint.h>\n\n"
            f"const unsigned int image_width = {width};\n"
            f"const unsigned int image_height = {height};\n"
            f"const unsigned int image_channels = {channels};\n"
            f"const uint8_t image_data[{width * height * channels}] = {{\n {all}"
            f"}};\n\n"
        )
    else:
        cpp_content = (
            "// This file is automatically generated from a JPG image (grayscale mode).\n"
            "#include <stdint.h>\n\n"
            f"const unsigned int image_width = {width};\n"
            f"const unsigned int image_height = {height};\n"
            f"const unsigned int image_channels = {channels};\n"
            f"const uint8_t image_data[{width * height}] = {{\n {all}"
            f"}};\n\n"
        )

    try:
        with open(output_filename, 'w') as f:
            f.write(cpp_content)
        print(f"Successfully generated C++ file: {output_filename}")
    except Exception as e:
        print(f"Error writing to file '{output_filename}': {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
